import { useState } from 'react'
import { Button } from "/components/ui/button"
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "/components/ui/card"
import { Input } from "/components/ui/input"
import { Label } from "/components/ui/label"
import { RadioGroup, RadioGroupItem } from "/components/ui/radio-group"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "/components/ui/select"
import { Textarea } from "/components/ui/textarea"
import { Calendar, Clock, Heart, Star, Users } from "lucide-react"
import { format } from 'date-fns'

export default function SleepMoodCreativityTracker() {
  const [sleepQuality, setSleepQuality] = useState('average')
  const [mood, setMood] = useState('neutral')
  const [wordsWritten, setWordsWritten] = useState('')
  const [songsComposed, setSongsComposed] = useState('')
  const [entries, setEntries] = useState<{ date: string; sleepQuality: string; mood: string; wordsWritten: number; songsComposed: number }[]>([])

  const handleAddEntry = () => {
    const newEntry = {
      date: format(new Date(), 'yyyy-MM-dd HH:mm'),
      sleepQuality,
      mood,
      wordsWritten: parseInt(wordsWritten, 10) || 0,
      songsComposed: parseInt(songsComposed, 10) || 0,
    }
    setEntries([...entries, newEntry])
    setSleepQuality('average')
    setMood('neutral')
    setWordsWritten('')
    setSongsComposed('')
  }

  const calculateCorrelations = () => {
    let totalWordsWritten = 0
    let totalSongsComposed = 0
    let totalGoodSleep = 0
    let totalGoodMood = 0

    entries.forEach(entry => {
      totalWordsWritten += entry.wordsWritten
      totalSongsComposed += entry.songsComposed
      if (entry.sleepQuality === 'good') totalGoodSleep++
      if (entry.mood === 'good') totalGoodMood++
    })

    const avgWordsWritten = totalWordsWritten / entries.length || 0
    const avgSongsComposed = totalSongsComposed / entries.length || 0
    const goodSleepPercentage = (totalGoodSleep / entries.length) * 100 || 0
    const goodMoodPercentage = (totalGoodMood / entries.length) * 100 || 0

    return {
      avgWordsWritten,
      avgSongsComposed,
      goodSleepPercentage,
      goodMoodPercentage,
    }
  }

  const correlations = calculateCorrelations()

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-white p-4">
      <Card className="w-full max-w-3xl">
        <CardHeader>
          <CardTitle className="text-2xl font-bold">Sleep, Mood, and Creativity Tracker</CardTitle>
          <CardDescription>Track your sleep, mood, and creative output to gain personalized insights</CardDescription>
        </CardHeader>
        <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <div className="mb-4">
              <Label htmlFor="sleep-quality" className="block text-sm font-medium leading-6 text-gray-900">
                Sleep Quality
              </Label>
              <Select onValueChange={setSleepQuality} defaultValue={sleepQuality}>
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="Select sleep quality" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="poor">Poor</SelectItem>
                  <SelectItem value="average">Average</SelectItem>
                  <SelectItem value="good">Good</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="mb-4">
              <Label htmlFor="mood" className="block text-sm font-medium leading-6 text-gray-900">
                Mood
              </Label>
              <Select onValueChange={setMood} defaultValue={mood}>
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="Select mood" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="bad">Bad</SelectItem>
                  <SelectItem value="neutral">Neutral</SelectItem>
                  <SelectItem value="good">Good</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="mb-4">
              <Label htmlFor="words-written" className="block text-sm font-medium leading-6 text-gray-900">
                Words Written
              </Label>
              <Input
                id="words-written"
                type="number"
                value={wordsWritten}
                onChange={(e) => setWordsWritten(e.target.value)}
                className="mt-2 block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
              />
            </div>
            <div className="mb-4">
              <Label htmlFor="songs-composed" className="block text-sm font-medium leading-6 text-gray-900">
                Songs Composed
              </Label>
              <Input
                id="songs-composed"
                type="number"
                value={songsComposed}
                onChange={(e) => setSongsComposed(e.target.value)}
                className="mt-2 block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
              />
            </div>
            <Button onClick={handleAddEntry}>Add Entry</Button>
          </div>
          <div className="flex flex-col justify-between">
            <div>
              <h3 className="text-lg font-semibold mb-2">Correlations</h3>
              <p className="mb-2">Average Words Written: {correlations.avgWordsWritten.toFixed(2)}</p>
              <p className="mb-2">Average Songs Composed: {correlations.avgSongsComposed.toFixed(2)}</p>
              <p className="mb-2">Good Sleep Percentage: {correlations.goodSleepPercentage.toFixed(2)}%</p>
              <p className="mb-2">Good Mood Percentage: {correlations.goodMoodPercentage.toFixed(2)}%</p>
            </div>
          </div>
        </CardContent>
        <CardFooter>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {entries.map((entry, index) => (
              <Card key={index} className="bg-gray-50">
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Calendar className="w-4 h-4" />
                    {entry.date}
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="mb-2">Sleep Quality: {entry.sleepQuality}</p>
                  <p className="mb-2">Mood: {entry.mood}</p>
                  <p className="mb-2">Words Written: {entry.wordsWritten}</p>
                  <p className="mb-2">Songs Composed: {entry.songsComposed}</p>
                </CardContent>
              </Card>
            ))}
          </div>
        </CardFooter>
      </Card>
    </div>
  )
}
Share
Refresh
